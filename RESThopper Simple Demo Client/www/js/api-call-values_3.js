function gh_api_request_3(){
  var radiusXVal = document.getElementById('radiusXVal').value;
  var radiusYVal = document.getElementById('radiusYVal').value;
  /*
  if(loaded_ghx_master.length > 100){
    pass
  }
  {
    console.log("bad ghx upload parce your doc")
  }
  */
  /*
  var data = JSON.stringify({
    "algo": loaded_ghx_master,
    "input": {
      "Numerator": 1.2,
      "Demoninator": 3.4
    }
  });
  */
  var data = JSON.stringify(
    {
    	"algo" : "<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>0</Major>
          <Minor>9</Minor>
          <Revision>76</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">34013b76-66a5-4b46-8a22-1cc5273972c2</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">636762690615169572</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">Spheres.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>-482</X>
                  <Y>-128</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">13</item>
          </items>
          <chunks count="13">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2a43ef96-8f87-4892-8b94-237a47e8d3cf</item>
                <item name="Name" type_name="gh_string" type_code="10">Box 2Pt</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="5">
                    <item name="Description" type_name="gh_string" type_code="10">Create a box defined by two points.</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">dca02054-b11e-417b-b6d3-212fa294abd0</item>
                    <item name="Name" type_name="gh_string" type_code="10">Box 2Pt</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Box</item>
                  </items>
                  <chunks count="5">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>576</X>
                          <Y>230</Y>
                          <W>64</W>
                          <H>64</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>607</X>
                          <Y>262</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">First corner</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">a114c276-3b9e-4f77-aa8b-7dcf180bde66</item>
                        <item name="Name" type_name="gh_string" type_code="10">Point A</item>
                        <item name="NickName" type_name="gh_string" type_code="10">A</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">f526692b-2c88-4168-9233-307fcea3ebc0</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>578</X>
                              <Y>232</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>586.5</X>
                              <Y>242</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Second corner</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">584d6191-227d-4512-b219-8dfeb3af0e50</item>
                        <item name="Name" type_name="gh_string" type_code="10">Point B</item>
                        <item name="NickName" type_name="gh_string" type_code="10">B</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">50943348-d2bd-4603-a23a-85f1e64cae03</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>578</X>
                              <Y>252</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>586.5</X>
                              <Y>262</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="2">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Base plane</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">0551d220-4c3f-493d-9549-a509d19066e0</item>
                        <item name="Name" type_name="gh_string" type_code="10">Plane</item>
                        <item name="NickName" type_name="gh_string" type_code="10">P</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>578</X>
                              <Y>272</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>586.5</X>
                              <Y>282</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="plane" type_name="gh_plane" type_code="72">
                                      <Ox>0</Ox>
                                      <Oy>0</Oy>
                                      <Oz>0</Oz>
                                      <Xx>1</Xx>
                                      <Xy>0</Xy>
                                      <Xz>0</Xz>
                                      <Yx>0</Yx>
                                      <Yy>1</Yy>
                                      <Yz>0</Yz>
                                    </item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Resulting box</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">b427cf9e-75bd-4e70-a5af-7fd4662d8a51</item>
                        <item name="Name" type_name="gh_string" type_code="10">Box</item>
                        <item name="NickName" type_name="gh_string" type_code="10">B</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>622</X>
                              <Y>232</Y>
                              <W>16</W>
                              <H>60</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>630</X>
                              <Y>262</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">fbac3e32-f100-4292-8692-77240a42fd1a</item>
                <item name="Name" type_name="gh_string" type_code="10">Point</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of three-dimensional points</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">f526692b-2c88-4168-9233-307fcea3ebc0</item>
                    <item name="Name" type_name="gh_string" type_code="10">Point</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pt</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>490</X>
                          <Y>208</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>515.8</X>
                          <Y>220</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>0</X>
                                  <Y>0</Y>
                                  <Z>0</Z>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">fbac3e32-f100-4292-8692-77240a42fd1a</item>
                <item name="Name" type_name="gh_string" type_code="10">Point</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of three-dimensional points</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">50943348-d2bd-4603-a23a-85f1e64cae03</item>
                    <item name="Name" type_name="gh_string" type_code="10">Point</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pt</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>490</X>
                          <Y>256</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>515.8</X>
                          <Y>268.8</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="PersistentData">
                      <items count="1">
                        <item name="Count" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Branch" index="0">
                          <items count="2">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                            <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Item" index="0">
                              <!--GH_Point only stores data which exists, test the existence of data fields prior to reading.-->
                              <items count="1">
                                <item name="Coordinate" type_name="gh_point3d" type_code="51">
                                  <X>10</X>
                                  <Y>10</Y>
                                  <Z>10</Z>
                                </item>
                              </items>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="3">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">e202025b-dc8e-4c51-ae19-4415b172886f</item>
                <item name="Name" type_name="gh_string" type_code="10">Populate 3D</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="5">
                    <item name="Description" type_name="gh_string" type_code="10">Populate a 3-Dimensional region with points</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">41071aac-9259-4578-ad90-890a9c5720f1</item>
                    <item name="Name" type_name="gh_string" type_code="10">Populate 3D</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pop3D</item>
                  </items>
                  <chunks count="6">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>706</X>
                          <Y>288</Y>
                          <W>65</W>
                          <H>84</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>738</X>
                          <Y>330</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Box that defines the 3D region for point insertion</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">bde865e7-5dd5-49d3-ab12-978fbe3a83ed</item>
                        <item name="Name" type_name="gh_string" type_code="10">Region</item>
                        <item name="NickName" type_name="gh_string" type_code="10">R</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">b427cf9e-75bd-4e70-a5af-7fd4662d8a51</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>708</X>
                              <Y>290</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>717</X>
                              <Y>300</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="5">
                                    <item name="Plane" type_name="gh_plane" type_code="72">
                                      <Ox>0</Ox>
                                      <Oy>0</Oy>
                                      <Oz>0</Oz>
                                      <Xx>1</Xx>
                                      <Xy>0</Xy>
                                      <Xz>0</Xz>
                                      <Yx>0</Yx>
                                      <Yy>1</Yy>
                                      <Yz>0</Yz>
                                    </item>
                                    <item name="RefID" type_name="gh_guid" type_code="9">00000000-0000-0000-0000-000000000000</item>
                                    <item name="X" type_name="gh_interval1d" type_code="60">
                                      <A>0</A>
                                      <B>10</B>
                                    </item>
                                    <item name="Y" type_name="gh_interval1d" type_code="60">
                                      <A>0</A>
                                      <B>10</B>
                                    </item>
                                    <item name="Z" type_name="gh_interval1d" type_code="60">
                                      <A>0</A>
                                      <B>2</B>
                                    </item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Number of points to add</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">9aee793f-f709-43b0-9461-9bd6980706de</item>
                        <item name="Name" type_name="gh_string" type_code="10">Count</item>
                        <item name="NickName" type_name="gh_string" type_code="10">N</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">7fd35b34-78df-494b-8588-b5d0c7bbc03c</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>708</X>
                              <Y>310</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>717</X>
                              <Y>320</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_int32" type_code="3">100</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="2">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Random seed for insertion</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">35371bc4-8799-4298-b894-91e71bc17346</item>
                        <item name="Name" type_name="gh_string" type_code="10">Seed</item>
                        <item name="NickName" type_name="gh_string" type_code="10">S</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>708</X>
                              <Y>330</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>717</X>
                              <Y>340</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_int32" type_code="3">1</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="3">
                      <items count="7">
                        <item name="Access" type_name="gh_int32" type_code="3">1</item>
                        <item name="Description" type_name="gh_string" type_code="10">Optional pre-existing population</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">c083e3dc-8cf7-4b72-b816-012d21aa1251</item>
                        <item name="Name" type_name="gh_string" type_code="10">Points</item>
                        <item name="NickName" type_name="gh_string" type_code="10">P</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">true</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>708</X>
                              <Y>350</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>717</X>
                              <Y>360</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="7">
                        <item name="Access" type_name="gh_int32" type_code="3">1</item>
                        <item name="Description" type_name="gh_string" type_code="10">Population of inserted points</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">8e0d1e58-54d9-4de1-bba9-eeb25b0b8959</item>
                        <item name="Name" type_name="gh_string" type_code="10">Population</item>
                        <item name="NickName" type_name="gh_string" type_code="10">P</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>753</X>
                              <Y>290</Y>
                              <W>16</W>
                              <H>80</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>761</X>
                              <Y>330</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="4">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">dabc854d-f50e-408a-b001-d043c7de151d</item>
                <item name="Name" type_name="gh_string" type_code="10">Sphere</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="5">
                    <item name="Description" type_name="gh_string" type_code="10">Create a spherical surface.</item>
                    <item name="Hidden" type_name="gh_bool" type_code="1">true</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">046f93e2-aa2d-4e53-941c-349462e0f9cc</item>
                    <item name="Name" type_name="gh_string" type_code="10">Sphere</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Sph</item>
                  </items>
                  <chunks count="4">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>828</X>
                          <Y>335</Y>
                          <W>64</W>
                          <H>44</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>859</X>
                          <Y>357</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Base plane</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">fdcb3bbc-607d-428c-9d3e-caf3f3e1b15a</item>
                        <item name="Name" type_name="gh_string" type_code="10">Base</item>
                        <item name="NickName" type_name="gh_string" type_code="10">B</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">8e0d1e58-54d9-4de1-bba9-eeb25b0b8959</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>830</X>
                              <Y>337</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>838.5</X>
                              <Y>347</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="plane" type_name="gh_plane" type_code="72">
                                      <Ox>0</Ox>
                                      <Oy>0</Oy>
                                      <Oz>0</Oz>
                                      <Xx>1</Xx>
                                      <Xy>0</Xy>
                                      <Xz>0</Xz>
                                      <Yx>0</Yx>
                                      <Yy>1</Yy>
                                      <Yz>0</Yz>
                                    </item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Sphere radius</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">db7617dd-76e8-4ad3-9a92-e6a41a650d45</item>
                        <item name="Name" type_name="gh_string" type_code="10">Radius</item>
                        <item name="NickName" type_name="gh_string" type_code="10">R</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">0b9dab73-87a3-48a5-af36-2c0a6a17e8ca</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>830</X>
                              <Y>357</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>838.5</X>
                              <Y>367</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_double" type_code="6">1</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Resulting sphere</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">36509df0-fc08-4f94-b72f-ae4f9244d5ba</item>
                        <item name="Name" type_name="gh_string" type_code="10">Sphere</item>
                        <item name="NickName" type_name="gh_string" type_code="10">S</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>874</X>
                              <Y>337</Y>
                              <W>16</W>
                              <H>40</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>882</X>
                              <Y>357</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="5">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">2ab17f9a-d852-4405-80e1-938c5e57e78d</item>
                <item name="Name" type_name="gh_string" type_code="10">Random</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="4">
                    <item name="Description" type_name="gh_string" type_code="10">Generate a list of pseudo random numbers.</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">3c40bf97-b594-410a-836e-f92038038566</item>
                    <item name="Name" type_name="gh_string" type_code="10">Random</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Random</item>
                  </items>
                  <chunks count="5">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>580</X>
                          <Y>335</Y>
                          <W>82</W>
                          <H>64</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>612</X>
                          <Y>367</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Domain of random numeric range</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">6480aacf-8aaa-4401-8e43-d735c3fa588c</item>
                        <item name="Name" type_name="gh_string" type_code="10">Range</item>
                        <item name="NickName" type_name="gh_string" type_code="10">R</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">0e8af38a-ffa1-4bf4-bb70-c6f7b3801727</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>582</X>
                              <Y>337</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>591</X>
                              <Y>347</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="Interval" type_name="gh_interval1d" type_code="60">
                                      <A>0</A>
                                      <B>1</B>
                                    </item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Number of random values</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">45d61831-3e1b-4abf-882e-00f3cd6880c4</item>
                        <item name="Name" type_name="gh_string" type_code="10">Number</item>
                        <item name="NickName" type_name="gh_string" type_code="10">N</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">7fd35b34-78df-494b-8588-b5d0c7bbc03c</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>582</X>
                              <Y>357</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>591</X>
                              <Y>367</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_int32" type_code="3">1</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="2">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Seed of random engine</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">c372095b-30b8-4436-8786-c34acbdbe272</item>
                        <item name="Name" type_name="gh_string" type_code="10">Seed</item>
                        <item name="NickName" type_name="gh_string" type_code="10">S</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">8852e4fa-f8a4-4c1e-bf31-4089daf87902</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>582</X>
                              <Y>377</Y>
                              <W>15</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>591</X>
                              <Y>387</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_int32" type_code="3">2</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="8">
                        <item name="Access" type_name="gh_int32" type_code="3">1</item>
                        <item name="Description" type_name="gh_string" type_code="10">Random numbers</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">0b9dab73-87a3-48a5-af36-2c0a6a17e8ca</item>
                        <item name="Mapping" type_name="gh_int32" type_code="3">1</item>
                        <item name="Name" type_name="gh_string" type_code="10">Random</item>
                        <item name="NickName" type_name="gh_string" type_code="10">R</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>627</X>
                              <Y>337</Y>
                              <W>33</W>
                              <H>60</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>635.5</X>
                              <Y>367</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="6">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">d1a28e95-cf96-4936-bf34-8bf142d731bf</item>
                <item name="Name" type_name="gh_string" type_code="10">Construct Domain</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="4">
                    <item name="Description" type_name="gh_string" type_code="10">Create a numeric domain from two numeric extremes.</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">a0899e4e-7cb9-449b-ad71-994ade8d18d7</item>
                    <item name="Name" type_name="gh_string" type_code="10">Construct Domain</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Dom</item>
                  </items>
                  <chunks count="4">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>471</X>
                          <Y>335</Y>
                          <W>61</W>
                          <H>44</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>502</X>
                          <Y>357</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Start value of numeric domain</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">728b02c7-f561-44fb-8446-3cdc898dde38</item>
                        <item name="Name" type_name="gh_string" type_code="10">Domain start</item>
                        <item name="NickName" type_name="gh_string" type_code="10">A</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">6d64b631-70f3-47a0-bb71-b003836da4a3</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>473</X>
                              <Y>337</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>481.5</X>
                              <Y>347</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_double" type_code="6">0</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_input" index="1">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">End value of numeric domain</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">ba65ddd0-dfe0-4289-a904-8b612929fcc3</item>
                        <item name="Name" type_name="gh_string" type_code="10">Domain end</item>
                        <item name="NickName" type_name="gh_string" type_code="10">B</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="Source" index="0" type_name="gh_guid" type_code="9">6ec5ec26-7450-4422-a7db-37efc23bc3dc</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>473</X>
                              <Y>357</Y>
                              <W>14</W>
                              <H>20</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>481.5</X>
                              <Y>367</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="1">
                                    <item name="number" type_name="gh_double" type_code="6">1</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Numeric domain between {A} and {B}</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">0e8af38a-ffa1-4bf4-bb70-c6f7b3801727</item>
                        <item name="Name" type_name="gh_string" type_code="10">Domain</item>
                        <item name="NickName" type_name="gh_string" type_code="10">I</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>517</X>
                              <Y>337</Y>
                              <W>13</W>
                              <H>40</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>523.5</X>
                              <Y>357</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="7">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">ac2bc2cb-70fb-4dd5-9c78-7e1ea97fe278</item>
                <item name="Name" type_name="gh_string" type_code="10">Geometry</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of generic geometry</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">59e6a0ee-8ec3-4b73-93a4-9567d1213aba</item>
                    <item name="Name" type_name="gh_string" type_code="10">Geometry</item>
                    <item name="NickName" type_name="gh_string" type_code="10">spheres</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">36509df0-fc08-4f94-b72f-ae4f9244d5ba</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>985</X>
                          <Y>345</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>1010.227</X>
                          <Y>357.2464</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="8">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">3e8ca6be-fda8-4aaf-b5c0-3c54c8bb7312</item>
                <item name="Name" type_name="gh_string" type_code="10">Number</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of floating point numbers</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">7fd35b34-78df-494b-8588-b5d0c7bbc03c</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number</item>
                    <item name="NickName" type_name="gh_string" type_code="10">count</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>323</X>
                          <Y>223</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>348</X>
                          <Y>235.2</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="9">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">3e8ca6be-fda8-4aaf-b5c0-3c54c8bb7312</item>
                <item name="Name" type_name="gh_string" type_code="10">Number</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of floating point numbers</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6d64b631-70f3-47a0-bb71-b003836da4a3</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number</item>
                    <item name="NickName" type_name="gh_string" type_code="10">minRadius</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>323</X>
                          <Y>251</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>348.4</X>
                          <Y>263.6</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="10">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">3e8ca6be-fda8-4aaf-b5c0-3c54c8bb7312</item>
                <item name="Name" type_name="gh_string" type_code="10">Number</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of floating point numbers</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">6ec5ec26-7450-4422-a7db-37efc23bc3dc</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number</item>
                    <item name="NickName" type_name="gh_string" type_code="10">maxRadius</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>322</X>
                          <Y>277</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>347.648</X>
                          <Y>289.984</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="11">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">3e8ca6be-fda8-4aaf-b5c0-3c54c8bb7312</item>
                <item name="Name" type_name="gh_string" type_code="10">Number</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="6">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of floating point numbers</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8852e4fa-f8a4-4c1e-bf31-4089daf87902</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number</item>
                    <item name="NickName" type_name="gh_string" type_code="10">seed</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>323</X>
                          <Y>304</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>348.048</X>
                          <Y>316.624</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="12">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">1e936df3-0eea-4246-8549-514cb8862b7a</item>
                <item name="Name" type_name="gh_string" type_code="10">Mesh</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of polygon meshes</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">8a2bc0b9-8a52-4092-8d8b-33ae26e464bf</item>
                    <item name="Name" type_name="gh_string" type_code="10">Mesh</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Mesh</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">59e6a0ee-8ec3-4b73-93a4-9567d1213aba</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>1073</X>
                          <Y>345</Y>
                          <W>50</W>
                          <H>24</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>1098</X>
                          <Y>357</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="4019">iVBORw0KGgoAAAANSUhEUgAAAJYAAABkCAIAAADrOV6nAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAA9ISURBVHhe7ZoLUFvXmcdpO9udNGlm7fgJxjYOfjbZdLM7s5t4uu3uxGl282qTdbpts2k2TmMnseuNbezYBMzLEAMCPZCEZCSQkMDiDcY8xMOIdzDYSLxBAvS40pV0JQQOYMc2Z78LMkU2ju1MY3rb85v/aMTVuRKj3z3nfN8FP8xfAgjDWP6o0IxhIFgh48EKGQ9WyHiwQsaDFTIerJDxYIWMBytkPFgh48EKGY+PQqvV6j2MYQ4+CnU6ncVi8b6CYQg+Ctvb2/v6+hwOh/dFDBPwUdjY2BgZGQkWKYryvo75s8dHYXV1dUREhFAoLC8vn7cIGyRJ2r6euZGYJcFHYWFhocFgcDqdaWlppaWlbrcb/HV1dbW0tra1tX2xGC0tLZ2dnXgHXUJ8FM7JAG12u10sFpeVlYGa8gq1Ttff0dGt0/ZrtX23pbt7sKambnBwgCAI71tiHi4+CueXRLAISs6ePRsSclgslov40s9OJhWXaPLzq+5ItUpVPDQ0iBUuFT4KvcdmASUej0ehyExK4otF2WxOhkxWLJcXyTLL5MpKheKcTFYER2YP5ur1Q1jhUuGj0GQy3barUZQzKys/U3FepaqQyQqlGeVnuGJBcjyXJ89UnMvKOi/LKMrMzDOZjHg7XCp8FEJfCCYAWFGhIh0bG2tvb+PyzqSwpeHhrPTMSgkr0lbyk0uf+seEJ6aJVaGhn6fLSthsUX29Znx8HHZQ77tiHiI+CqHsVKvVsCReunTp3DmYZFl/+MOB+AReUlzKvo+OC6W1Rfw3kMqv81U/1ulUPk/2+/cPiyUFbHbqhx/ug8FQnTocDnyX7iHjo1BTX79334fQUcjlcmgNe3p6WltbWCy+SKQSCrP4qYUJEXsajq/gfPBrrkAlEp3l8xVicW5CQkpNTXVHR0d6erpUKjUajSRJet8e8+3jo7C0uKggL9c6NuFwUtAdwnyCvVAiUfK4ch5PLhAoElkZMbESTmoeGBUIlPCYkqIQCmWwD8L8gz6yurqax+MNDw9jiw8NH4Xq4kJPVjKlzjWbjCan20m5VKqzkdEJsSdZe/ce4wuzBXwlXwDaMufD40EkBoN+riIFi01NTVwuF+aiz10bi4Ww2gjoVejHOwPH8fL7DfFRaLQQxIjBeV7hTo9zVOa47KQkW3UiLJZ1WhwXJ+SlZHK5stvC4cjYbPG8QqhpXS5XfX09zEX4ca7AgfrIZDL3dvXeLT263r6ePhhH/0aYB8RHIf0VEoSJGrMM653l2R55AlWmSIiKOxkviYkXR0VxoiHRPomIYMfFcUZGhhf2hWCxrq6Ow+HodDqYl27PeF+rxtiQbW3LJ77It7TeHvMXhYa6rO62FiuJa9oHxkeh9xgAIp1jZqPRVVfSxz6hOXmgNlOirtVU1reqazRqdY1aXT2Xigp1S0vrnX099CRQ4AgEgpycnJLy6gJeGGp8X5P4MnX+XdT4e6R53yf1712veLfzQhlhx38heWDuonAOi8XocJFOyqNrnSyRTOWlXLlQ4B7qdrrdji+nHOMTTpcL6p1F20FYUeE4FEStra0x8ezUY79B2VvbT/g7hJuQYjOS+0a2aerMZm1tCeFwe8/H3Ddfq/AWJtIB1Y1lsM9eW+Q6m+JSJjtLMsjmKmKgx0zYTE6XyeGCMWarzWwhFm5psAtCpWpzXWmQn0KyYJTzFFI8hTJ/dEe2T6Xt0NYUY4XfgPtS6AVWV1BlpyxDA2STmipOd2WxIVRBmqMqj2ypsXZ1WIb6oZo1W620dTtlclBGcD/+1aU81leijVfEW2/KtiPFDqTcQs/FrK0ocweS7UDybVPirdrqQqzwG/AgCuexECa7E+alyUaCM9vFBntNkbNE5soVus7y6OTw4TmVL6aKJFfKlRUCtjTs7Snek3kfrLELNn91Jng45sejCc/po565Lt6ClNuRfMukMLhXc87q9Hg/AnPffCOFC4GpabPDbKON2p1mwmoeHQGvRE+ntbPN1tHk6mhsLC1VRr03kxZkTwqaFm1sC3telRSSxTmqOPG/U+xNxviNNk7QNWFQVZbQ7Jmi3wcWZMx9c2+F9G1vK2kyW02We8VshZH0Xgg7ImEFEzBNjTa7Y/LmwDneDH81vR0K/XuSdzfnxpSnn5B8+s5k4vqmQ/6G+PUoY0f0/rdbhIkT1XlWXTt9Tfg2GAS8220ftzCzHw2/qXf0XxM+Che5RUJ/KyZtfVV3U81Ac1WXprKr/q7RadRdzRo4x3vuLFCUdg+ZS1kfI+HanoiASa6/5sSL5eLwQnaIav/Oq5yAm6IglLbxGm+9Milc336RqitxKdlQMdkutdAzEvZUM9gh+zvadJqKwZbq2z50Lrr6Kl1DtXF09EEt0hfoYnhfvgPvy3fgfXkp8FFosi7490OYRg7KNj7ZcEFjKT91pSnWqI5GOja6nHTXdLEGy3iDgyMWmIW3gDZfVVyZ8vF/oLTA5pDVzqR17rjN2mNbB0K3XE1eh0QbUCpk/WTi6v4LBbbxaWhj4HOtHc1uRZIrm2tr0xAmY5/e2HI26UZbnL70JNImo8sspE2iA0/m0sWyVCb26Hpgsno/+H4grEP6kaGh4dERI0lYHDbb6IgJfoSD9ELiC3gymomhIXq82WiGhslBkgbDKBwxGIwW2EGWCN9ZSE2aaHNQdjqJXq2ztpgsSAvb/7Fb8XNDTGD50Q0o5xmkfPruCTZk7hkcti1UCF3/gNGuZh+YYS+/kbIO8QNRagAS+dMRBtI/QgTrpuJXaCuyiFvlzFxBC4USlZt6NTdF+tnx4tjdkylBkj1rvlI+hZRPubnBE6LtKOtpuifJgl4lmEx/2aA3WWxzK/k9AjObdFAD7c39F/L1X5S1nZPzYqPjThztOC8fai0bqCvov9hEOpwwbH681WbvaagcaCgZaSurUAhPh4UmfBZiaCwcbD7fU5M/3NtlW6JbSz4Ku3oNNv2A/UKJK4sD3YKzMsdxuTlLmmERPHdDFjwt2YagJVDuQDk/QnIoIxdmG8rcjDIDDRm/oxUuuFlD9/jj13pzYmcSfjidFHCdG4BA5G3hB0ydXq4tVxDUuPe0WWA7hKYTrvcLF5qrPn/rpmS9O+XJmYwt5qSNAzn/PBj3mOP0hhvSzT2nNtzI2GhgP1d+Xk1aCcvI8D1jNY3quvsrxBGo7QhqCRGcOhAZG//hwSPC8LfRpeOoLaRSdLJT2wvD5sbbLWZNXVN7xhHUeWy85vChA3sOHT3+8/98tYL7DtKF3qj9pDCNOwL7Mfh+6PgozN373zOn3qVyhUR/j9EzOTo+RUxMmUbM9tSdSPkkUoC/7cbkzWWHApGS7sdRxjZanmzbdek2Z+qPx0TBw+n/Y7SOmeGrh+pjNg7XmLq5MyPkF4izvPh3y0yxa1CKP+L6hrd2KvZxmIUWqEhvnTgfI1z/V24aso+g1FUoPRhJNmtDl0+WBLgj/ToPrrwhDdaE+F8Trx/l7gzdtxc2UXc2XH/3yHS+QBV5Iu3IK0juPxC2fNeLLwpSzyRxha+98C+exBUofW360VcU4cevFgjmxl/N439+8GB91E+QcnX2nid27no9Oytr3yeh7/zrGiRdg8RBUR/9prahdUn+Ed5HYXevwdlYQeWJoLFzlmba68scl1sV4jNW7j92ha7tjduIlNsK3ntizQ++U3fo8XFO0FjypsrD61BG4FDa62U1TZrzyvLIl0vzCly9l6GjmIu7X1eVl5/xwU7EWUZFrUSc1YuEu+pq7KNd2Ulkf+/8ifOhei7VVtZWn3ptOn5F+f5VN9OCHLH+zb/9XtOeR5wJgbCbTvPWw7JsiHu6vKyKtN/Xl2gliC49oT71K8T6LuI9+skLy57/t5ee++ku0W9XIv6jKOl76ug3OwfoWmxuPEmS9S3ajrBnUMr3x+MeeeHvVz7/s13PPvsPzQd/iISP3Yj9myLeyRErtfSzkBi7SlcTpB02QrKxkqo4SxZIwvd/ZOf9kyF8jTYycDJ5k174nVquX+0v/AaOrPqSt+ni8XUzZ1Z3p/06WlgokUqLI19LPnposkRC9/VzyRONl2ZrY341Fvrd6ejHrkQskomIR+2ffr+P84mnRP7HE29lujRdGhVR+OnPriWuaDu86jovAAnXTbMDr3LoTRSlBCA+PK4kk57VD43QeyFdEt8jJrDiGh+oVfUmvjIgfKsh7s3wPb88tffNzuT/6ufvhoP9VUrSNQHD5k+xOj09qtje5Nf1orcKPnsjbM8bvINv6gW7+3i7u5LeGO5ssTpcs1/pw8ZHofEKom91QnEFKxh9/8Vlm5hsbWy2nN6OpOuQJOgab+NQzHIj65H29x+n4gNRWhA6sxGlBnoET7fzftmX8u/tn+/q7Bshxiboxu5WzK5xg36wsyJXW5W/aDrV8FgwYjSZqbGFJ84FDvYTnubol2Zi/NDpv52JpYPi6Mw9pxPnZzkZ2NvdT9AK7xOofZwGq8dggZV/bMztdrvcRtuYgYB4zDYnDPAOnAUmmIl0wUsw3uagx1OUe5gePDZs9dANscln/EPDR6GrQkW21hL93XQRYrPTNeHElLbjMnl6yzR7zThrHV1DCjZMszbMCOlOwFtP8uGJP+IvRymPjApeNZicZgIu2wWYoPm2WSnP12e2CFr8W4ALvL/+XKf0mC4zbNF0ykK1+RyjabaAfCDo8Xfka95k0fFLio9Ce905qkjiyubRe7iK7yo4Yy/KiDn8f87EreaIFc0hq2AFQ7COwdoFgSe3hbvMwHlpcIRcWJH+aTCZCLvLTE2aqS/vkkmLc/xB9f1l4KOQ/tvC3M3rkWGir8umbSMvt6QmnCaj1l5j/Z3z1BOItxJx7x7OD4ZZPx0Y/hYUYu6Oj0LvMQCuZ4K+yWmlxvSDQ/3hO5xRq90xAY5If0ckPC4e8uSybtZrBrNjYWuP+ba5i8IFwJTq0+l0bW1dF+8RGDPU13fnP2FgvlXurRAgSLvV7ryfzN6iXJrC7K+W+1KI+XMGK2Q8WCHjwQoZD1bIeLBCxoMVMh6skPFghYwHK2Q8WCHjwQoZD1bIeLBCxoMVMh6skPFghYwHK2Q8WCHjwQoZD1bIeLBCxoMVMh6skPFghYwHK2Q8WCHjwQoZD1bIeLBCxoMVMh6skPFghYwHK2Q8WCHjwQoZD1bIeLBCxoMVMh6skPFghYwHK2Q8WCHjwQoZD1bIeLBCxoMVMh4fhRiG4lWIYTB+fv8PX0Zp/SppeF0AAAAASUVORK5CYII=</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>",
    	"values" : {
    		"count" : 10,
    		"minRadius" : 0.05,
    		"maxRadius" : 10,
    		"seed" : 0
    	}
    }
  );

  var url = document.getElementById('api_url_input').value;
  var xhr = new XMLHttpRequest();
  //xhr.withCredentials = true;

  xhr.addEventListener("readystatechange", function () {
    if (this.readyState === 4) {
      //console.log(this.responseText);
      retrunedgeometry = JSON.parse(this.responseText);
      console.log(retrunedgeometry);
      let mydata = retrunedgeometry.items[0].data
      let decodedata= JSON.parse(mydata)
      console.log(decodedata);
      console.log(decodedata.data);
    }
  });

  xhr.open("POST", url);
  xhr.setRequestHeader("Content-Type", "application/json");
  //xhr.setRequestHeader("cache-control", "no-cache");
  //xhr.setRequestHeader("Postman-Token", "f217b7b1-4821-4012-ade2-763df6bfd6f5");
  xhr.send(data);

}


/*

"<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Archive name="Root">
  <!--Grasshopper archive-->
  <!--Grasshopper and GH_IO.dll are copyrighted by Robert McNeel & Associates-->
  <!--Archive generated by GH_IO.dll file utility library {0.2.0002}-->
  <items count="1">
    <item name="ArchiveVersion" type_name="gh_version" type_code="80">
      <Major>0</Major>
      <Minor>2</Minor>
      <Revision>2</Revision>
    </item>
  </items>
  <chunks count="2">
    <chunk name="Definition">
      <items count="1">
        <item name="plugin_version" type_name="gh_version" type_code="80">
          <Major>1</Major>
          <Minor>0</Minor>
          <Revision>7</Revision>
        </item>
      </items>
      <chunks count="5">
        <chunk name="DocumentHeader">
          <items count="5">
            <item name="DocumentID" type_name="gh_guid" type_code="9">d3e6eb55-6b2a-4d32-b3ce-ed3e8f438db7</item>
            <item name="Preview" type_name="gh_string" type_code="10">Shaded</item>
            <item name="PreviewMeshType" type_name="gh_int32" type_code="3">1</item>
            <item name="PreviewNormal" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;150;0;0</ARGB>
            </item>
            <item name="PreviewSelected" type_name="gh_drawing_color" type_code="36">
              <ARGB>100;0;150;0</ARGB>
            </item>
          </items>
        </chunk>
        <chunk name="DefinitionProperties">
          <items count="3">
            <item name="Date" type_name="gh_date" type_code="8">636760190506968642</item>
            <item name="Description" type_name="gh_string" type_code="10"></item>
            <item name="Name" type_name="gh_string" type_code="10">PI.ghx</item>
          </items>
          <chunks count="3">
            <chunk name="Revisions">
              <items count="1">
                <item name="RevisionCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
            <chunk name="Projection">
              <items count="2">
                <item name="Target" type_name="gh_drawing_point" type_code="30">
                  <X>10</X>
                  <Y>10</Y>
                </item>
                <item name="Zoom" type_name="gh_single" type_code="5">1.5</item>
              </items>
            </chunk>
            <chunk name="Views">
              <items count="1">
                <item name="ViewCount" type_name="gh_int32" type_code="3">0</item>
              </items>
            </chunk>
          </chunks>
        </chunk>
        <chunk name="RcpLayout">
          <items count="1">
            <item name="GroupCount" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="GHALibraries">
          <items count="1">
            <item name="Count" type_name="gh_int32" type_code="3">0</item>
          </items>
        </chunk>
        <chunk name="DefinitionObjects">
          <items count="1">
            <item name="ObjectCount" type_name="gh_int32" type_code="3">3</item>
          </items>
          <chunks count="3">
            <chunk name="Object" index="0">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">3e8ca6be-fda8-4aaf-b5c0-3c54c8bb7312</item>
                <item name="Name" type_name="gh_string" type_code="10">Number</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="7">
                    <item name="Description" type_name="gh_string" type_code="10">Contains a collection of floating point numbers</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">88dc7528-4aee-4903-987e-1dfd69248b59</item>
                    <item name="Name" type_name="gh_string" type_code="10">Number</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Pi</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">a180fb6e-bcd2-4546-87b6-3926debefff8</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                  </items>
                  <chunks count="1">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>340</X>
                          <Y>114</Y>
                          <W>50</W>
                          <H>20</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>365.8333</X>
                          <Y>124.6667</Y>
                        </item>
                      </items>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="1">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">59e0b89a-e487-49f8-bab8-b5bab16be14c</item>
                <item name="Name" type_name="gh_string" type_code="10">Panel</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="9">
                    <item name="Description" type_name="gh_string" type_code="10">A panel for custom notes and text values</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">c9b998f9-a456-4fa8-9953-4e17f7b667da</item>
                    <item name="Name" type_name="gh_string" type_code="10">Panel</item>
                    <item name="NickName" type_name="gh_string" type_code="10">Panel</item>
                    <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                    <item name="ScrollRatio" type_name="gh_double" type_code="6">0</item>
                    <item name="Source" index="0" type_name="gh_guid" type_code="9">a180fb6e-bcd2-4546-87b6-3926debefff8</item>
                    <item name="SourceCount" type_name="gh_int32" type_code="3">1</item>
                    <item name="UserText" type_name="gh_string" type_code="10">Double click to edit panel content…</item>
                  </items>
                  <chunks count="2">
                    <chunk name="Attributes">
                      <items count="6">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>327</X>
                          <Y>146</Y>
                          <W>160</W>
                          <H>100</H>
                        </item>
                        <item name="MarginLeft" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginRight" type_name="gh_int32" type_code="3">0</item>
                        <item name="MarginTop" type_name="gh_int32" type_code="3">0</item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>327.3333</X>
                          <Y>146</Y>
                        </item>
                        <item name="Selected" type_name="gh_bool" type_code="1">true</item>
                      </items>
                    </chunk>
                    <chunk name="PanelProperties">
                      <items count="7">
                        <item name="Colour" type_name="gh_drawing_color" type_code="36">
                          <ARGB>255;255;250;90</ARGB>
                        </item>
                        <item name="DrawIndices" type_name="gh_bool" type_code="1">true</item>
                        <item name="DrawPaths" type_name="gh_bool" type_code="1">true</item>
                        <item name="Multiline" type_name="gh_bool" type_code="1">true</item>
                        <item name="SpecialCodes" type_name="gh_bool" type_code="1">false</item>
                        <item name="Stream" type_name="gh_bool" type_code="1">false</item>
                        <item name="Wrap" type_name="gh_bool" type_code="1">true</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Font">
                          <items count="2">
                            <item name="Family" type_name="gh_string" type_code="10">Courier New</item>
                            <item name="Size" type_name="gh_single" type_code="5">5.33333349</item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
            <chunk name="Object" index="2">
              <items count="2">
                <item name="GUID" type_name="gh_guid" type_code="9">49584390-d541-41f7-b5f6-1f9515ac0f73</item>
                <item name="Name" type_name="gh_string" type_code="10">ArcCosine</item>
              </items>
              <chunks count="1">
                <chunk name="Container">
                  <items count="4">
                    <item name="Description" type_name="gh_string" type_code="10">Compute the angle whose cosine is the specified value.</item>
                    <item name="InstanceGuid" type_name="gh_guid" type_code="9">00a18345-1b6e-42d5-893c-460887508a65</item>
                    <item name="Name" type_name="gh_string" type_code="10">ArcCosine</item>
                    <item name="NickName" type_name="gh_string" type_code="10">ArcCosine</item>
                  </items>
                  <chunks count="3">
                    <chunk name="Attributes">
                      <items count="2">
                        <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                          <X>144</X>
                          <Y>85</Y>
                          <W>108</W>
                          <H>78</H>
                        </item>
                        <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                          <X>195</X>
                          <Y>124</Y>
                        </item>
                      </items>
                    </chunk>
                    <chunk name="param_input" index="0">
                      <items count="7">
                        <item name="Description" type_name="gh_string" type_code="10">Input value</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">88c3c9fc-592e-4502-b4db-f8c18055ba30</item>
                        <item name="Name" type_name="gh_string" type_code="10">Value</item>
                        <item name="NickName" type_name="gh_string" type_code="10">Value</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                        <item name="UseDegrees" type_name="gh_bool" type_code="1">false</item>
                      </items>
                      <chunks count="2">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>146</X>
                              <Y>87</Y>
                              <W>34</W>
                              <H>74</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>164.5</X>
                              <Y>124</Y>
                            </item>
                          </items>
                        </chunk>
                        <chunk name="PersistentData">
                          <items count="1">
                            <item name="Count" type_name="gh_int32" type_code="3">1</item>
                          </items>
                          <chunks count="1">
                            <chunk name="Branch" index="0">
                              <items count="2">
                                <item name="Count" type_name="gh_int32" type_code="3">1</item>
                                <item name="Path" type_name="gh_string" type_code="10">{0}</item>
                              </items>
                              <chunks count="1">
                                <chunk name="Item" index="0">
                                  <items count="2">
                                    <item name="TypeName" type_name="gh_string" type_code="10">Grasshopper.Kernel.Types.GH_Integer</item>
                                    <item name="number" type_name="gh_int32" type_code="3">-1</item>
                                  </items>
                                </chunk>
                              </chunks>
                            </chunk>
                          </chunks>
                        </chunk>
                      </chunks>
                    </chunk>
                    <chunk name="param_output" index="0">
                      <items count="6">
                        <item name="Description" type_name="gh_string" type_code="10">Output value</item>
                        <item name="InstanceGuid" type_name="gh_guid" type_code="9">a180fb6e-bcd2-4546-87b6-3926debefff8</item>
                        <item name="Name" type_name="gh_string" type_code="10">Result</item>
                        <item name="NickName" type_name="gh_string" type_code="10">Result</item>
                        <item name="Optional" type_name="gh_bool" type_code="1">false</item>
                        <item name="SourceCount" type_name="gh_int32" type_code="3">0</item>
                      </items>
                      <chunks count="1">
                        <chunk name="Attributes">
                          <items count="2">
                            <item name="Bounds" type_name="gh_drawing_rectanglef" type_code="35">
                              <X>210</X>
                              <Y>87</Y>
                              <W>40</W>
                              <H>74</H>
                            </item>
                            <item name="Pivot" type_name="gh_drawing_pointf" type_code="31">
                              <X>230</X>
                              <Y>124</Y>
                            </item>
                          </items>
                        </chunk>
                      </chunks>
                    </chunk>
                  </chunks>
                </chunk>
              </chunks>
            </chunk>
          </chunks>
        </chunk>
      </chunks>
    </chunk>
    <chunk name="Thumbnail">
      <items count="1">
        <item name="Thumbnail" type_name="gh_drawing_bitmap" type_code="37">
          <bitmap length="5776">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</bitmap>
        </item>
      </items>
    </chunk>
  </chunks>
</Archive>
"


*/
